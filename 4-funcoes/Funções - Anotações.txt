FUNÇÕES
-Objetivos:
1. Mostrar como declarar funções;
2.Como manipular parâmetros;
3.Apresentar loops e outras declarações;
4. Apresentar  argumento "this".

TIPOS DE FUNÇÕES

ESTRUTURA
-Definição comum de uma função:
	
	function nome(parametros) {
	             //instruções
	}

-Variáveis criadas dentro de um função apenas podem ser utilizadas dentro dela.
-Quando invocamos o "return", a função para de ser executada

FUNÇÃO ANÔNIMA
-Funções que representam expressões
EX:
	const soma = function(a, b) {
	return a + b;
	}
	soma (1, 2) // 3
	soma(5, 4) //4

-Uma variável pode armazenar uma função

FUNÇÃO AUTOINVOCÁVEL
-IIFE (Immediately Invocaked Function Expression)
-Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada
EX:
	(
	   function () {
	          let name = 'Matt',
	          return name;
	}
	)(); // Matt

-Necessário () que representa sua chamada
-Também pode ser utilizada com parâmetros ou armazenada em uma variável

CALLBACKS
-Uma função passada como argumento para outra
-Utilizando callbacks, você tem maior controle da ordem de chamadas

PARÂMETROS

OBJETO "ARGUMENTS"
-Um array com todos os parâmetros passados quando a função foi invocada

ARRAYS
-Spread: uma forma de lidar separadamente com elementos
-O que era parte de um array se torna um elemento independente 
-Sintaxe: "..."
-Rest: combina os argumentos de um array
-O que era um elemento independente se torna parte de um array

OBJECT DESTRUCTURING
-Entre chaves {}, podemos filtrar apenas os dados que nos interessa em um objeto

LOOPS

IF/ELSE
-Condição
-Declaração 1: ocorre caso a condição seja verdadeira (dentro de if)
-Declaração 2: ocorre caso a condição seja falsa (dentro de else)
OBS: Para ter o código limpo posso armazenar condicionais em variáveis
-Javascript não tem elseif, as palavras sempre estão espaçadas!

SWITCH/CASE
-Equivale a uma comparação de tipo e valor (===)
-Sempre precisa de um valor "default" - que não retorna nenhum dos cases
-Ideal para quando se precisa comparar muitos valores

FOR
-Loop dentro de elementos iteráveis (arrays, strings)
-For...in: Loop entre propriedades enumeráveis de um objeto
-For...of: Loop entre estruturas iteráveis (arrays, strings)

WHILE
-Executa instruções até que a condição se torne falsa
-do...while: Executa instruções até que a condição se torne falsa, porém a primeira execução sempre ocorre

THIS
-A palavra reservada this é uma referência de contexto
-Seu valor pode mudar de acorde com o lugar no código onde foi chamado

CALL
-É possível passar parâmetros para essa função separando-as por vírgulas
-Podemos utilizar o apply para passar seus parâmetros nas funções separando-as por arrays
-Bind: Clona a estrutura da função onde é chamada e aplica o valor do objeto passando como parâmetro

ARROW FUNCTIONS
-Caso exista apenas uma linha, pode dispensar as chaves e o return
-Caso exista apenas um parâmetro, pode dispensar os parênteses
-Arrow function NÃO faz hoisting

OUTRAS RESTRIÇÕES - ARROW FUNCTION
-this sempre será um objeto global. Métodos para modificar seu valor não irão funcionar
-Não existe o objeto "arguments"
-O constructur (ex: new meuObjeto()) também não pode ser utilizado.